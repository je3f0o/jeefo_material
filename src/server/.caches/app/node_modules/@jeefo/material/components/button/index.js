 jeefo.register("node_modules/@jeefo/material/components/button/index.js", async (exports, module) => { const __dirname = "node_modules/@jeefo/material/components/button", __filename = "node_modules/@jeefo/material/components/button/index.js"; const require = path => { return jeefo.require(path, __filename, __dirname); }; /* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
* File Name   : index.js
* Created at  : 2020-10-08
* Updated at  : 2021-03-02
* Author      : jeefo
* Purpose     :
* Description :
* Reference   :
.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.*/
// ignore:start
"use strict";

/* globals*/
/* exported*/

// ignore:end

const Observer       = (await require("@jeefo/observer"));
const JeefoDOMParser = (await require("@jeefo/jqlite/dom_parser"));
const theme_service  = (await require("../../services/theme"));

const ripple = JeefoDOMParser.parse(`<md-ripple></md-ripple>`)[0];

exports.style = (`.md-button{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;margin:0;cursor:pointer;white-space:nowrap;-webkit-tap-highlight-color:transparent;display:inline-flex;align-items:center;justify-content:center;border:none;height:36px;min-width:64px;padding:0 8px;outline:none;overflow:hidden;position:relative;box-sizing:border-box;background:transparent;will-change:transform;border-radius:4px;vertical-align:middle;text-decoration:none}.md-button:disabled{cursor:default;pointer-events:none}.md-button:disabled{color:currentColor;opacity:.38}.md-button .md-ripple{border-radius:4px}.md-button--contained{padding:0 16px}.md-button--contained:not(:disabled){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2),0px 1px 5px 0px rgba(0, 0, 0, 0.12),0px 2px 2px 0px rgba(0, 0, 0, 0.14);z-index:2}.md-button--contained:not(:disabled):hover,.md-button--contained:not(:disabled):focus{box-shadow:0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 1px 10px 0px rgba(0, 0, 0, 0.12),0px 4px 5px 0px rgba(0, 0, 0, 0.14);z-index:4}.md-button--contained:not(:disabled):active{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 3px 14px 2px rgba(0, 0, 0, 0.12),0px 8px 10px 1px rgba(0, 0, 0, 0.14);z-index:8}.md-button--outlined{border:1px solid currentColor;padding:0 15px}.md-button.md-button--icon{color:currentColor;height:unset;min-width:unset;border-radius:50%}.md-button.md-button--icon.md-button--small{padding:8px}.md-button.md-button--icon.md-button--medium{padding:12px}.md-button--fab{width:56px;height:56px;box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 1px 18px 0px rgba(0, 0, 0, 0.12),0px 6px 10px 0px rgba(0, 0, 0, 0.14);z-index:6;padding:0;min-width:unset;border-radius:50%;background-color:currentColor}.md-button--fab:disabled{box-shadow:0px 0px 0px 0px rgba(0, 0, 0, 0.2),0px 0px 0px 0px rgba(0, 0, 0, 0.12),0px 0px 0px 0px rgba(0, 0, 0, 0.14);z-index:0}.md-button--fab:hover,.md-button--fab:focus{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 3px 14px 2px rgba(0, 0, 0, 0.12),0px 8px 10px 1px rgba(0, 0, 0, 0.14);z-index:8}.md-button--fab:active{box-shadow:0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 5px 22px 4px rgba(0, 0, 0, 0.12),0px 12px 17px 2px rgba(0, 0, 0, 0.14);z-index:12}.md-button--fab.md-button--extented{width:auto;height:48px;padding:0 20px;border-radius:24px}.md-button--fab.md-button--extented>.md-icon{margin-right:8px}`
/* space filler





















































































*/);

theme_service.set_default({
    ".md-button": {
        "color": "$primary-color",
    },
    ".md-button--contained": {
        "color"            : "$on_primary-color",
        "background-color" : "$primary-color",
    },
    ".md-button--contained:disabled": {
        "color"            : "rgba($on_surface-color, .38)",
        "background-color" : "$divider-color",
    },
    ".md-button--fab": {
        "color"            : "$on_secondary-color",
        "background-color" : "$secondary-color",
    },
});

theme_service.register_template((`.md-button{content:"props:[color]"}.md-button--contained{content:"props:[color, background-color]"}.md-button--contained:disabled{content:"props:[color, background-color]"}.md-button--fab{content:"props:[color, background-color]"}`
/* space filler
















*/));

exports.template = element => {
    const typography = JeefoDOMParser.parse((`<md-typography variant="button"></md-typography>`
/* space filler
*/))[0];
    while (element.firstChild) {
        typography.appendChild(element.firstChild);
    }

    if (element.hasAttribute("href")) {
        const anchor = JeefoDOMParser.parse(`<a></a>`)[0];
        element = JeefoDOMParser.replace(element, anchor);
    } else {
        const button = JeefoDOMParser.parse(`<button></button>`)[0];
        button.setAttribute("type", "button");
        element = JeefoDOMParser.replace(element, button);
    }

    element.classList.add("md-button");
    element.appendChild(typography);
    element.appendChild(ripple.cloneNode());
    return element;
};

exports.bindings = {
    size        : "@",
    variant     : "@",
    is_disabled : "<isDisabled",
};

exports.controller = (function () { function MDButton () {} 
    MDButton.prototype.on_init = function ($element) {
        let variant;
        this.$element       = $element;
        const observer      = new Observer(this);
        const {DOM_element} = $element;

        const on_disable_change = is_disabled => {
            DOM_element.disabled = !! is_disabled;
            const method = DOM_element.disabled ? "add" : "remove";
            DOM_element.classList[method]("md-button--disabled");
        };

        const on_variant_change = value => {
            if (variant === "fab extented") {
                $element.remove_class("md-button--fab", "md-button--extented");
            } else if (variant) {
                $element.remove_class(`md-button--${variant}`);
            }

            if (value) {
                variant = value.toLowerCase();
                switch (variant) {
                    case "fab"       :
                    case "outlined"  :
                    case "contained" :
                        $element.add_class(`md-button--${variant}`);
                        break;
                    case "icon"      :
                        $element.add_class("md-button--icon");
                        this.set_size(this.size);
                        break;
                    case "fab extented":
                        $element.add_class("md-button--fab", "md-button--extented");
                        break;
                }
            }
        };

        on_variant_change(this.variant);
        on_disable_change(this.is_disabled);
        observer.on("variant"     , on_variant_change);
        observer.on("is_disabled" , on_disable_change);
    };

    MDButton.prototype.set_size = function (value) {
        const {$element} = this;
        if ([null, void 0].includes(value)) value = "small";

        switch (value) {
            case "sm"     :
            case "small"  :
                $element.add_class(`md-button--small`);
                break;
            case "md"     :
            case "medium" :
                $element.add_class(`md-button--medium`);
                break;
            case "lg"  :
            case "large" :
                $element.add_class(`md-button--large`);
                break;
        }
    };
MDButton.__jeefo_class__ = true; return MDButton;}());

exports.controller_name = "$md_button"; }); 
//# sourceURL=node_modules/@jeefo/material/components/button/index.js 