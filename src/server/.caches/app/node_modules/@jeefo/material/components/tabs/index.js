 jeefo.register("node_modules/@jeefo/material/components/tabs/index.js", async (exports, module) => { const __dirname = "node_modules/@jeefo/material/components/tabs", __filename = "node_modules/@jeefo/material/components/tabs/index.js"; const require = path => { return jeefo.require(path, __filename, __dirname); }; /* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
* File Name   : index.js
* Created at  : 2019-07-04
* Updated at  : 2021-03-03
* Author      : jeefo
* Purpose     :
* Description :
* Reference   :
.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.*/
// ignore:start
"use strict";

/* globals*/
/* exported*/

// ignore:end

const Observer            = (await require("@jeefo/observer"));
const EventEmitter        = (await require("@jeefo/utils/event_emitter"));
const array_remove        = (await require("@jeefo/utils/array/remove"));
const {definitions_table} = (await require("@jeefo/component"));
const theme_service       = (await require("../../services/theme"));
const class_modifier      = (await require("../../utils/class_modifier"));

definitions_table.register_component("md-tab", `${__dirname}/tab`);

exports.selector = "md-tabs";

exports.style = (`.md-tabs{display:block;overflow:hidden}.md-tabs__scroll-wrapper{overflow:scroll hidden;margin-bottom:-20px;padding-bottom:20px}.md-tabs__content{display:flex}.md-tabs__button{position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;margin:0;cursor:pointer;white-space:nowrap;-webkit-tap-highlight-color:transparent;display:flex;align-items:center;justify-content:center;flex:1 0 auto;border:none;height:48px;padding:0 24px;outline:none;background:transparent;transition:color .25s ease}.md-tabs__button:disabled{cursor:default;pointer-events:none}.md-tabs__button .md-icon+*{margin-left:8px}.md-tabs__button--selected .md-tabs__button__indicator{position:absolute;bottom:0;width:100%;height:2px;transition:transform .25s cubic-bezier(0.4, 0, 0.2, 1);border-bottom:2px solid currentColor}.md-tabs__button--stacked{height:72px}.md-tabs__button--stacked .md-typography{display:flex;align-items:center;flex-direction:column}.md-tabs__button--stacked .md-icon+*{margin:6px 0 0}.md-tabs--scrollable .md-tabs__scroller,.md-tabs--scrollable .md-tabs__content{float:left}`
/* space filler


















































*/);

theme_service.set_default({
    ".md-tabs__button": {
        "color": "rgba($on_surface-color, .6)",
    },
    ".md-tabs__button--selected": {
        "color": "$primary-color"
    },
    ".md-tabs--scrollable .md-tabs__scroller": {
        "padding" : "0 40px",
    },
    ".md-tabs--scrollable .md-tabs__content": {
        "background-color" : "rgba($on_surface-color, .04)",
    },
});

theme_service.register_template((`.md-tabs__button{content:"props:[color]"}.md-tabs__button--selected{content:"props:[color]"}.md-tabs--scrollable .md-tabs__scroller{content:"props:[padding]"}.md-tabs--scrollable .md-tabs__content{content:"props:[background-color]"}`
/* space filler















*/));

exports.template = (`<div class="md-tabs__scroll-wrapper"><div class="md-tabs__scroller"><div class="md-tabs__content"><jf-content select="md-tab"></jf-content></div></div></div>`
/* space filler




*/);

exports.bindings = {
    index   : '=',
    variant : '@',
};

exports.controller = (function () { function MDTabs () {}  
    MDTabs.prototype.on_init = function ($element) {
        const observer = new Observer(this);

        $element.add_class("md-tabs");
        this.tabs     = [];
        this.selected = null;
        this.$element = $element;

        $element.on("initialized", () => {
            if (! this.selected && this.tabs.length) {
                this.select(this.tabs[0]);
            }
            this.initialized = true;
        });

        const on_variant_change = (new_value, old_value) => {
            $element.remove_class(`md-tabs--${old_value}`);
            if (new_value) $element.add_class(`md-tabs--${new_value}`);
        };
        on_variant_change(this.variant);
        observer.on("variant", on_variant_change);

        return;
        const el             = $element.DOM_element;
        this.tabs            = [];
        this.body            = el.lastChild;
        this.wrapper         = el.firstChild;
        this.$element        = $element;
        this.is_rendered     = false;
        this.$scroll_wrapper = $element.children(1, 1);
        this.scroller        = this.$scroll_wrapper.DOM_element.firstChild;

        $element.add_class("md-tabs");
        $element.once("rendered", () => {
            if (! this.selected && this.tabs.length) {
                this.select(this.tabs[0]);
            }
            $element.add_class("md-tabs--no-transition");
            $element.trigger_reflow();
            $element.remove_class("md-tabs--no-transition");
            this.is_rendered = true;
        });
    };

    MDTabs.prototype.select = function (tab) {
        const selected_class = "md-tabs__button--selected";
        let prev_indicator_rect;
        if (this.selected) {
            prev_indicator_rect = this.selected.$indicator.rect();
            this.selected.$element.set_attr("tabindex", -1);
            this.selected.$element.remove_class(selected_class);
            this.selected.is_selected = false;
        }

        tab.$element.add_class(selected_class);
        if (prev_indicator_rect) {
            const curr_indicator_rect = tab.$indicator.rect();
            const x_pos = prev_indicator_rect.left - curr_indicator_rect.left;
            const ratio = prev_indicator_rect.width / curr_indicator_rect.width;
            tab.$indicator.css({
                transform  : `translateX(${x_pos}px) scaleX(${ratio})`,
                transition : "none",
            });
            tab.$indicator.trigger_reflow();
            tab.$indicator.css({transform: null, transition: null});
        }

        this.index      = this.tabs.indexOf(tab);
        this.selected   = tab;
        tab.$element.set_attr("tabindex", 0);
        tab.is_selected = true;

        if (this.initialized) {
            this.$element.trigger("change", {
                properties: {index: this.index}
            });
        }
    };

    MDTabs.prototype.add = function (tab) {
        let {children: tab_elems} = this.wrapper, i = 0;
        for (; i < tab_elems.length; ++i) if (tab_elems[i] === tab.el) break;
        this.tabs.splice(i, 0, tab);

        if (! this.active_tab && this.is_rendered) {
            tab.activate();
        }
    };

    MDTabs.prototype.remove = function (tab) {
        if (tab.is_activated) {
            const i = this.tabs.indexOf(tab);
            /**/ if (i < 0)                  return;
            else if (i+1 < this.tabs.length) this.tabs[i+1].activate();
            else if (i > 0)                  this.tabs[i-1].activate();
            else if (this.tabs.length > 1)   this.tabs[1].activate();
        }
        array_remove(this.tabs, tab);
    };

    MDTabs.prototype.transform = function (value) {
        this.scroller.style.setProperty("transition", "none");
        this.scroller.style.setProperty("transform", `translateX(${value}px)`);
        this.scroller.getBoundingClientRect();
        this.scroller.style.removeProperty("transition");
        this.scroller.style.removeProperty("transform");
    };

    MDTabs.prototype.reposition = function (tab) {
        array_remove(this.tabs, tab);
        this.add(tab);
    };

    MDTabs.prototype.reorder = function () {
        let direction       = "md-tabs__body__content--left";
        let other_direction = "md-tabs__body__content--right";

        for (const tab of this.tabs) {
            if (tab !== this.active_tab) {
                tab.content.classList.add(direction);
                tab.content.classList.remove(other_direction);
            } else {
                const t         = direction;
                direction       = other_direction;
                other_direction = t;
            }
        }
    };

    MDTabs.prototype.prev = function () {
        const index = this.$tabs.indexOf(this.active_tab);
        if (index > 0) {
            this.$tabs[index - 1].active();
        }
    };

    MDTabs.prototype.next = function () {
        const index = this.$tabs.indexOf(this.active_tab);
        if (index + 1 < this.$tabs.length) {
            this.$tabs[index + 1].active();
        }
    };
MDTabs.__jeefo_class__ = true; return MDTabs;}());

exports.controller_name = "$md_tabs";
 }); 
//# sourceURL=node_modules/@jeefo/material/components/tabs/index.js 