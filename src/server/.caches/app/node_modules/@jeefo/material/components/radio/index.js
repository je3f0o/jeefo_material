 jeefo.register("node_modules/@jeefo/material/components/radio/index.js", async (exports, module) => { const __dirname = "node_modules/@jeefo/material/components/radio", __filename = "node_modules/@jeefo/material/components/radio/index.js"; const require = path => { return jeefo.require(path, __filename, __dirname); }; /* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
* File Name   : index.js
* Created at  : 2021-01-31
* Updated at  : 2021-03-11
* Author      : jeefo
* Purpose     :
* Description :
* Reference   :
.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.*/
// ignore:start
"use strict";

/* globals*/
/* exported*/

// ignore:end

const jqlite               = (await require("@jeefo/jqlite"));
const Observer             = (await require("@jeefo/observer"));
const theme_service        = (await require("../../services/theme"));
const TranscludeController = (await require("@jeefo/component/transclude_controller"));

const root  = "md-radio";
const slice = [].slice;

exports.style = (`.md-radio__ripple:before,.md-radio__ripple:after,.md-radio input{width:40px;height:40px;position:absolute;top:-8px;left:-8px}.md-radio{position:relative;width:20px;height:20px;padding:2px;display:inline-block;vertical-align:bottom}.md-radio input{cursor:pointer;margin:0;opacity:0}.md-radio input:disabled~.md-radio__icon{opacity:.38}.md-radio input:not(:disabled):hover+.md-radio__ripple:before{opacity:.1;transform:scale(1)}.md-radio input:not(:disabled):focus+.md-radio__ripple:before{opacity:.13;transform:scale(1)}.md-radio input:not(:disabled):active+.md-radio__ripple:before{transition:opacity 100ms linear,transform 250ms ease;opacity:0;transform:scale(0.7)}.md-radio input:not(:disabled):active+.md-radio__ripple:after{opacity:.18;transform:scale(1)}.md-radio input:not(:disabled)~.md-radio__icon{opacity:.6}.md-radio input:not(:disabled):checked~.md-radio__icon{opacity:1}.md-radio input:checked~.md-radio__icon:after{transform:scale(1)}.md-radio__icon{position:relative;width:20px;height:20px;pointer-events:none}.md-radio__icon::before,.md-radio__icon::after{content:"";display:block;border-radius:50%}.md-radio__icon::before{width:100%;height:100%;border:2px solid currentColor;box-sizing:border-box}.md-radio__icon::after{position:absolute;top:5px;left:5px;width:10px;height:10px;transform:scale(0);background:currentColor;transition:transform .12s cubic-bezier(0, 0, 0.2, 1)}.md-radio__ripple{pointer-events:none}.md-radio__ripple:before,.md-radio__ripple:after{content:"";display:block;opacity:0;transform:scale(0);transition:opacity 75ms ease,transform 250ms ease;border-radius:50%;background-color:currentColor;transform-origin:center center}`
/* space filler
























































































*/);

theme_service.set_default({
    ".md-radio input:checked ~ *": {
        "color": "$primary-color",
    },
});

theme_service.register_template((`.md-radio input:checked~*{content:"props:[color]"}`
/* space filler





*/));

const transcluder = new TranscludeController((`<input type="radio"></input><div class="md-radio__ripple"></div><div class="md-radio__icon"></div>`
/* space filler



*/));
const transcluded_attrs = ["id", "name", "value"];

exports.template = element => {
    transcluder.transclude(element);
    const input = element.firstChild;

    let i = element.attributes.length;
    while (i--) {
        const {name, value} = element.attributes[i];
        if (name.startsWith("on--") || transcluded_attrs.includes(name)) {
            input.setAttribute(name, value);
            element.removeAttribute(name);
        }
    }

    element.classList.add(root);
};

exports.bindings = {
    isSelected : '<',
    isDisabled : '<',
};

exports.controller = (function () { function MDRadioButton () {} 
    MDRadioButton.prototype.on_init = function ($element) {
        const $input   = $element.children(0);
        const input    = $input.DOM_element;
        const observer = new Observer(this);

        observer.on("isSelected", value => {
            if (value) input.checked = true;
            else if (input.checked) input.checked = false;
        });

        const on_disabled_change = value => {
            if (value) {
                input.disabled = true;
                $element.add_class("md-radio--disabled");
            } else {
                input.disabled = false;
                $element.remove_class("md-radio--disabled");
            }
            $input.trigger("state_changed", {bubbles: false});
        };

        if (this.isSelected) input.checked = true;
        on_disabled_change(this.isDisabled);
        observer.on("isDisabled", on_disabled_change);

        $input.on("change", () => {
            if (input.checked && input.name) {
                this.deactivate_others(input);
            }
        });
    };

    MDRadioButton.prototype.deactivate_others = function (input) {
        let target = document, el = input;
        while ((el = el.parentNode)) {
            if (el.tagName === "FORM") {
                target = el;
                break;
            }
        }
        const query   = `input[type="radio"][name="${input.name}"]`;
        const elems   = target.querySelectorAll(query);
        const $inputs = slice.call(elems).map(jqlite);
        for (const $i of $inputs) {
            if ($i.DOM_element !== input) {
                $i.DOM_element.checked = false;
                $i.trigger("state_changed", {bubbles: false});
            }
        }
    };
MDRadioButton.__jeefo_class__ = true; return MDRadioButton;}());

exports.controller_name = "$md_radio";
 }); 
//# sourceURL=node_modules/@jeefo/material/components/radio/index.js 