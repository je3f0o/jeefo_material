
object
.
// comment
identifier;

const {p = 1} = {};

fn = async (p1,p2) => { /*cccc*/ };

with (expr) {}

s = () => {
},
object_define_property(5);

[let] = [];

"use strict";

(1,2,
() => {}
,4
)

1,2,
3
fn = () => {}; + 1

// 11.9.1 - Rules of Automatic Semicolon Insertion
a
b
do; while(false) 'ASI before me'

// Expression Error cases
//a 1;
//a = function () {} + 1

o = {
    get
    ,
    p
        :
            expr
    ,
    method
           (
            )
             {
              }
    ,
    *
      gen
          (
           )
            {
            }
    ,
    get
        abc
            (
             )
              {
               }
    ,
    set
        abc
            (
             v
              )
               {
                }
    ,
    async abc
              (
               )
                {
                 }
    ,
};

// Identifiers
// ===========
//for (;false;) label: function fn () {}

x = ref_id;
({binding_id} = {});

// Error case
//in = ref_id;
//enum = ref_id;

// Error case when strict mode
//let = ref_id;
//static = ref_id;
//implements = ref_id;

super
     .
      super;

super
[
    p
];

o
 .
  p;

({operator, right: expression} = expr);
router.get('*', async ({ request }, res) => {})

x = o.m(v => {});
async function f () { x = await f(); }
console.warn(`Undefined mime: ${
    mime
}`);

o = {
    p : [
        new Something(),
    ]
};

const a = 1

const calculate_list_style = ({
    $list, $select, $container, $root = jqlite(document.body)
} /* c */ = {}) => {
};

zz = `
    zzz
    ${ ff }
qwe
`;

a = !! b;
void void 2;

style = `
my-main {
    display: block;
}
`;

str = `\`${ attrs[i].value }\``;
str = `
ANON_FN
return anonymous.call(this_arg, $ctrls);
`;


str = `[${MARKER}="${this.id}"]`;
a = `
    "${ a }"
`;

//"use strict";
// 12.2 - Primary expressions
// --------------------------

// 12.2.2 - This keyword
this;

// 12.2.3 - Literals
null;
true;
false;
3.14;
'single quote string';
"double quote string";
/*
assignment_expression = computed = static = value = expr = str = 2;
object = o = {};
spread_element = id = [];
*/

// 12.2.5 - Array initializer
[];
[,,,];
[assignment_expression]; // optional ,
[...spread_element]; // optional ,
[, expr, ...spread_element]; // recursion

// 12.2.6 - Object initializer
o = {
    static,
    * gen () {},

    3.14   : value,
    "str"  : value,
    await  : value,
    [true] : value,

    3.14   () {},
    "str"  () {},
    async  () {},
    [true] () {},

    get 3.14  () {},
    get "str" () {},
    get async () {},
    get [str] () {},

    set 3.14  (v) {},
    set "str" (v) {},
    set await (v) {},
    set [str] (v) {},

    async 3.14       () {},
    async "str"      () {},
    async await      () {},
    async [computed] () {},
};

// 12.15.5 - Destructuring assignment
[, id, id = value, {} = {}, [] = [], [], o.p, ...rest] = [,,[]];
({
    id,
    id : id,
    id : { z = 2 },
    id : { [prop] : id },
    id : [, id, id = value, {} = {}, [] = [], [], o.p, ...rest],
    id = 123
} = {});

//({ nested : { p2 = 1 } });

fn = (...rest) => {}
fn = (...{}) => {}
fn = (...[]) => {}

o = { z : {}, i : [2 > {}] };

// 14.7
fn = async yeild => { await fn(); };

3..property;
object.property = assignment_expression;
super.property = assignment_expression;

id_ref = assignment_expression;
fn = function       () {};
fn = function await () {};
fn = function yield () {};

fn = async () => await 2;

async (
    p1, {}, [],
    p2 = 1,
    {} = {},
    [, id, id = value, {} = {}, [] = [], [], ...rest] = [],
    [...[]] = [],
    [...{}] = []
) => {};

function call (a,b,c) {
}
call(1,2,3);

() => {};
(p1, {}, [], p2 = 1, {} = {}, [] = []) => {};

fn();

// Declarations and the Variable statement
// Variable statement
var a;
var a,b;
var a=1,b;
var a,b=1;
var [] = [];
var {} = {};
var a,
    b
var a
    ,b

// error
//var () = {};

let   $var;
const $var = value;
const x = o.let;
// error cases
//let const = 123;
//let {let} = {};
//fn = async () => { let await = 123; }
// Non-strict mode
//var let = 2;

let [] = [];
let [,] = [];
let [,a] = [];
let [,[]] = [];

let { prop = default_value } = {};
let { prop:binding_id = default_value, a } = {};
let { prop:{ nested } } = {};
let { prop:[] } = {};
let { 123:[] } = {};
let { "str":[] } = {};
let { [computed]:[] } = {};

// Functions and class
async function async_fn ({ a : s }) { }
async_fn = async function () { await fn(); };
async_fn = async function yield () { await fn(); };

gen = function * () { yield 1; };
gen = function * await () { yield 2; };

class EmptyClass {}
A = class {};
A = class extends B {};
A = class extends null {};
A = class A extends B {};

fn()[a] = 2;

class A extends B {
    ;
    3.14       () {}
    "str"      () {}
    static     () {}
    id         () {}
    // Getters
    get 3.14       () {}
    get "str"      () {}
    get static     () {}
    get [computed] () {}
    get id         () {}
    // Setter
    set 3.14       (v) {}
    set "str"      (v) {}
    set static     (v) {}
    set [computed] (v) {}
    set id         (v) {}
    // Statics
    static 3.14       () {}
    static "str"      () {}
    static static     () {}
    static [computed] () {}
    static id         () {}
    // Static getters
    static get 3.14       () {}
    static get "str"      () {}
    static get static     () {}
    static get [computed] () {}
    static get id         () {}
    // Static setters
    static set 3.14       (v) {}
    static set "str"      (v) {}
    static set static     (v) {}
    static set [computed] (v) {}
    static set id         (v) {}
    // Static async
    static async 3.14       () {}
    static async "str"      () {}
    static async static     () {}
    static async [computed] () {}
}

// for_variable_declaration
for (var i in []);
for (var i of []);
for (var i in
    []
);
for (var i of
    []
);
// Non-strict code.
//for (var i = 2 in []);

// for_declaration
for (let v in []);
for (let v of []);
for (let [] in []);
for (let {} in []);
for (let [] of []);
for (let {} of []);
for (const v in []);
for (const [] in []);
for (const {} in []);
for (const [] of []);
for (const {} of []);
// Non-strict code.
//for (let in []);
//for (let of []);
// error case
//for (const of []) {}
//for (const in []) {}
//for (var {} = {} in []) {}

// for_statement -> lexical_declaration
for (const x = y, y = z;;);
for (let x,y;;);
for (const i = 123;;);

for (var i = 2;;);
for (;;) {}
for (i = 0, len = 10;;) {}
//for (var i = 2 in []); // Non-strict code.

// Error cases
//for (let x, let = 2;;) {}

a,b,c;

label :
while (false) {}

class Class {
    constructor ({
        $list, $select, $container, $root = jqlite(document.body)
    } = {}) {
    }
}

