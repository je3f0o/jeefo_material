o = { a_1 : 99, $b : 2 };
[1,2,3];
PP.define("IS_NULL", function (x) { return x === null;   }, true);
instance.define("IS_OBJECT" , function (x) { return x !== null && typeof x === "object"; } , true);
instance.define("ARRAY_EXISTS" , function (arr, x) { return arr.indexOf(x) >= 0; } , true);

return {
    pre : (link && link.pre) ? link.pre : null,
    /**
     * Compiles and re-adds the contents
     */
    post : function(scope, element) {
        // Compile the contents
        if (! compiledContents) {
            compiledContents = $compile(contents);
        }
        // Re-add the compiled contents to the element
        compiledContents(scope, function(clone) {
            element.append(clone);
        });

        // Call the post-linking function, if any
        if (link && link.post) {
            link.post.apply(null, arguments);
        }
    }
};
(function check_condition () {
    if (is_canceled) { return; }
    var result = callback();

    if (result) {
        deferred.resolve();
    } else if ((Date.now() + interval) < end_time) {
        setTimeout(check_condition, interval);
    } else {
        deferred.reject();
    }
}());
var EXTRACT_FILENAME = /filename[^;\\n=]*=((?:['\\"]).*?\\2|[^;\\n]*)/g;
var HOST_CONSTRUCTOR_REGEX = /^\[object .+?Constructor\]$/; // 40
match    = match[0].match(/filename="([^"\\\\]*(?:\\.[^"\\\\]*)*)"/i);
filename = (match && match[1]) ? decodeURI(match[1]) : fallback_filename;
$ngRedux.connect(function () {
    var state = $ngRedux.getState();
    if (state.backdrop) {
        $element.css({
            bottom  : 0,
            opacity : 0.6,
        });
    } else {
        $element.css({
            bottom  : "100%",
            opacity : 0,
        });
    }

    return { backdrop : state.backdrop };
})(dumb_state);
return {
    'collapse-handler-right'          : ! folder.is_loading && ! folder.is_collapsed,
    'icon-spin4 animate-spin'         : folder.is_loading,
    'icon-right-dir collapse-handler' : ! folder.is_loading
};
size = (size / divider);

define([], function () {
    function compare_by_id (a, b) {
        var result = 0;
        if (a.conclusion_id < b.conclusion_id) {
            result = -1;
        } else if (a.conclusion_id > b.conclusion_id) {
            result = 1;
        }
        return result;
    }
    function compare_by_string (a, b) { return a.rate.localeCompare(b.rate); }
});

this.REGEX_FLAGS.indexOf(flags_value.charAt(i)) !== -1 && flags.indexOf(flags_value.charAt(i)) === -1;

// ---------------------------------

a = {
    get aa() {
    },
    set aa (value) {
    },
    property : value
};
[1,2,3];
(1 + 2);
/*pre*/fn/*a*/(/*b*/);
define(123, function () {
    function compare_by_id (a, b) {
        var result = 0;
        if (a.conclusion_id < b.conclusion_id) {
            result = -1;
        } else if (a.conclusion_id > b.conclusion_id) {
            result = 1;
        }
        return result;
    }
    function compare_by_string (a, b) { return a.rate.localeCompare(b.rate); }
});

/**
 * @Validators
 * @param : a (Something)
 * @param : b (Something)
 * @param : c (Something)
 */
function /*a*/ name /*b*/ (/*c*/ a /*d*/, /*e*/ b /*f*/, /*g*/ c /*k*/) /*h*/ {
    CAMEL_CASE_REGEXP = /[A-Z]/g;
}
fn = /*0*/ function /*a*/ zz /*b*/ (/*c*/ a /*d*/, /*e*/ b /*f*/, /*g*/ c /*k*/) {
    CAMEL_CASE_REGEXP = /[A-Z]/g;
};

var core_module       = jeefo.module("jeefo_core", []),
    CAMEL_CASE_REGEXP = /[A-Z]/g

snake_case = function (str) {
    return str.replace(CAMEL_CASE_REGEXP, function (letter, pos) {
        return (pos ? '_' : '') + letter.toLowerCase();
    });
};
a ? b : c;

var EXTRACT_FILENAME = /filename[^;\\n=]*=((?:['\\"]).*?\\2|[^;\\n]*)/g;
var HOST_CONSTRUCTOR_REGEX = /^\[object .+?Constructor\]$/; // 40

switch (something) {
    case a :
    case b : break;
    default:
}
do; while(a);
with (a);
while (a);

label: ;
