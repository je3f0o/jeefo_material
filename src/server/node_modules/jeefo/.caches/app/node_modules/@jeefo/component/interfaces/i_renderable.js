 jeefo.register("node_modules/@jeefo/component/interfaces/i_renderable.js", async (exports, module) => { const __dirname = "node_modules/@jeefo/component/interfaces", __filename = "node_modules/@jeefo/component/interfaces/i_renderable.js"; const require = path => { return jeefo.require(path, __filename, __dirname); }; /* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
* File Name   : i_renderable.js
* Created at  : 2020-06-08
* Updated at  : 2020-10-23
* Author      : jeefo
* Purpose     :
* Description :
* Reference   :
.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.*/
// ignore:start
"use strict";

/* globals*/
/* exported*/

// ignore:end

const Observer       = (await require("@jeefo/observer"));
const IComponent     = (await require("./i_component"));
const Interpreter    = (await require("../interpreter"));
const ChangeDetector = (await require("../change_detector"));

var IRenderable = (function () {  
    function IRenderable (name, $element, {
        binders      = [],
        dependencies = [],
        Controller, controller_name,
    }) {
        IComponent.call(this, name, { Controller, controller_name }, IRenderable);

        this.binders          = binders;
        this.$element         = $element;
        this.observer         = null;
        this.dependencies     = dependencies;
        this.change_detectors = [];
    } IRenderable.prototype = Object.create(IComponent.prototype);

    IRenderable.prototype.set_dependencies = function (bounded_component) {
        const {controller, dependencies} = this;

        dependencies.forEach(d => {
            let dependency;

            LOOP:
            for (let p = bounded_component; p; p = p.parent) {
                if (p.name === d.name) {
                    dependency = p;
                    break;
                }
                for (let d2 of p.directives) {
                    if (d.name === d2.name) {
                        dependency = d2;
                        break LOOP;
                    }
                }
            }

            if (dependency) {
                controller[d.property] = dependency.controller;
            } else if (! d.is_optional) {
                throw new Error("Dependency not found");
            }
        });
    };

    IRenderable.prototype.bind = function (bounded_component) {
        const element = this.$element.DOM_element;

        this.binders.forEach(({ property, operator, attribute_name }) => {
            if (! element.hasAttribute(attribute_name)) return;
            const script = element.getAttribute(attribute_name).trim();
            element.removeAttribute(attribute_name);

            if (! script) return;

            let interpreter;
            switch (operator) {
                // Once
                case '!' : {
                    const interpreter = new Interpreter(script, bounded_component);
                    this.controller[property] = interpreter.get_value();
                    return;
                }
                // String interpreter
                case '@' : {
                    const str_script = `\`${ script }\``;
                    interpreter = new Interpreter(str_script, bounded_component);
                    break;
                }
                // 1 way bind
                case '<' : {
                    interpreter = new Interpreter(script, bounded_component);
                    break;
                }
                // 2 way bind
                case '=' : {
                    interpreter = new Interpreter(script, bounded_component, true);
                    break;
                }
                default:
                    throw new Error("Invalid bind operator");
            }

            const change_detector = new ChangeDetector(interpreter, value => {
                this.controller[property] = value;
            });
            if (interpreter.setter) {
                this.observe(property, new_value => {
                    interpreter.set_value(new_value);
                });
            }
            this.change_detectors.push(change_detector);
        });
    };

    IRenderable.prototype.observe = function (property, notify_handler) {
        if (! this.observer) this.observer = new Observer(this.controller);
        this.observer.on(property, notify_handler);
    };

    IRenderable.prototype.digest = async function () {
        this.change_detectors.forEach(change_detector => {
            change_detector.invoke();
        });
        const {controller} = this;
        if (controller && typeof controller.on_digest === "function") {
            await controller.on_digest();
        }
    };

    IRenderable.prototype.destroy = async function () {
        const {controller} = this;
        if (controller) {
            if (typeof controller.on_destroy === "function") {
                await controller.on_destroy();
            }
            Observer.destroy(controller);
        }
    };
IRenderable.__jeefo_class__ = true; return IRenderable;}());

module.exports = IRenderable;
 }); 
//# sourceURL=node_modules/@jeefo/component/interfaces/i_renderable.js 