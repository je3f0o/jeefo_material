 jeefo.register("node_modules/@jeefo/parser/ast_node_table.js", async (exports, module) => { const __dirname = "node_modules/@jeefo/parser", __filename = "node_modules/@jeefo/parser/ast_node_table.js"; const require = path => { return jeefo.require(path, __filename, __dirname); }; /* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
* File Name   : ast_node_table.js
* Created at  : 2017-08-16
* Updated at  : 2019-09-05
* Author      : jeefo
* Purpose     :
* Description :
_._._._._._._._._._._._._._._._._._._._._.*/
// ignore:start
"use strict";

/* globals*/
/* exported*/

// ignore:end

const AST_Node_Definition = (await require("./ast_node_definition"));

var AST_Node_Table = (function () { 
	function AST_Node_Table () {
        this.reserved_words   = Object.create(null);
		this.node_definitions = [];
	}

    AST_Node_Table.prototype.get_reserved_words = function () {
        return Object.keys(this.reserved_words).sort((a, b) => {
            return a.localeCompare(b);
        });
    };

	AST_Node_Table.prototype.register_node_definition = function (node_definition) {
        const def = new AST_Node_Definition(node_definition);
        const other_def = this.node_definitions.find(other => {
            return other.id === def.id;
        });
        if (other_def) {
            throw new Error(`Duplicated AST_Node_Definition: ${ def.id }`);
        }
		this.node_definitions.push(def);
		this.node_definitions.sort((a, b) => a.precedence - b.precedence);
	};

	AST_Node_Table.prototype.register_reserved_word = function (word, node_definition) {
        if (this.reserved_words[word]) {
            throw new Error(`Duplicated reserved word: ${ word }`);
        }
        this.reserved_words[word] = new AST_Node_Definition(node_definition);
	};

	AST_Node_Table.prototype.register_reserved_words = function (words, node_definition) {
        node_definition = new AST_Node_Definition(node_definition);

        words.forEach(word => {
            if (this.reserved_words[word]) {
                throw new Error(`Duplicated reserved word: ${ word }`);
            }
            this.reserved_words[word] = node_definition;
        });
	};

	AST_Node_Table.prototype.find = function (token, parser) {
        if (token.id === "Identifier") {
            const reserved_word_definition = this.reserved_words[token.value];
            const is_matched = (
                reserved_word_definition &&
                reserved_word_definition.is(token, parser)
            );

            if (is_matched) { return reserved_word_definition; }
        }

        const { node_definitions } = this;
		let i = node_definitions.length;
		while (i--) {
			if (node_definitions[i].is(token, parser)) {
				return node_definitions[i];
			}
            if (parser.is_terminated) { return null; }
		}

        return null;
	};

    AST_Node_Table.prototype.remove_node_defs = function (defs) {
        defs.forEach(({ expression, reserved_word }) => {
            if (reserved_word) {
                delete this.reserved_words[reserved_word];
            } else {
                const index = this.node_definitions.findIndex(def => {
                    return def.id === expression;
                });
                if (index === -1) {
                    throw new Error(`Cannot find AST_Node_Definition: '${
                        expression
                    }' to remove`);
                }
                this.node_definitions.splice(index, 1);
            }
        });
    };
AST_Node_Table.__jeefo_class__ = true; return AST_Node_Table;}());

module.exports = AST_Node_Table;
 }); 
//# sourceURL=node_modules/@jeefo/parser/ast_node_table.js 